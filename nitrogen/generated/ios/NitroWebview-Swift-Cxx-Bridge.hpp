///
/// NitroWebview-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridNitroWebviewSpec` to properly resolve imports.
namespace margelo::nitro::nitrowebview { class HybridNitroWebviewSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroWebviewSpec_cxx` to properly resolve imports.
namespace NitroWebview { class HybridNitroWebviewSpec_cxx; }

// Include C++ defined types
#include "HybridNitroWebviewSpec.hpp"
#include <functional>
#include <memory>
#include <optional>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::nitrowebview::bridge::swift {

  // pragma MARK: std::function<void()>
  /**
   * Specialized version of `std::function<void()>`.
   */
  using Func_void = std::function<void()>;
  /**
   * Wrapper class for a `std::function<void()>`, this can be used from Swift.
   */
  class Func_void_Wrapper final {
  public:
    explicit Func_void_Wrapper(std::function<void()>&& func): _function(std::make_unique<std::function<void()>>(std::move(func))) {}
    inline void call() const {
      _function->operator()();
    }
  private:
    std::unique_ptr<std::function<void()>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void create_Func_void(void* _Nonnull swiftClosureWrapper);
  inline Func_void_Wrapper wrap_Func_void(Func_void value) {
    return Func_void_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void()>>
  /**
   * Specialized version of `std::optional<std::function<void()>>`.
   */
  using std__optional_std__function_void____ = std::optional<std::function<void()>>;
  inline std::optional<std::function<void()>> create_std__optional_std__function_void____(const std::function<void()>& value) {
    return std::optional<std::function<void()>>(value);
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::nitrowebview::HybridNitroWebviewSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::nitrowebview::HybridNitroWebviewSpec>`.
   */
  using std__shared_ptr_margelo__nitro__nitrowebview__HybridNitroWebviewSpec_ = std::shared_ptr<margelo::nitro::nitrowebview::HybridNitroWebviewSpec>;
  std::shared_ptr<margelo::nitro::nitrowebview::HybridNitroWebviewSpec> create_std__shared_ptr_margelo__nitro__nitrowebview__HybridNitroWebviewSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__nitrowebview__HybridNitroWebviewSpec_(std__shared_ptr_margelo__nitro__nitrowebview__HybridNitroWebviewSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::nitrowebview::HybridNitroWebviewSpec>
  using std__weak_ptr_margelo__nitro__nitrowebview__HybridNitroWebviewSpec_ = std::weak_ptr<margelo::nitro::nitrowebview::HybridNitroWebviewSpec>;
  inline std__weak_ptr_margelo__nitro__nitrowebview__HybridNitroWebviewSpec_ weakify_std__shared_ptr_margelo__nitro__nitrowebview__HybridNitroWebviewSpec_(const std::shared_ptr<margelo::nitro::nitrowebview::HybridNitroWebviewSpec>& strong) { return strong; }

} // namespace margelo::nitro::nitrowebview::bridge::swift
